//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\gg\source\repos\TextNumberParser\TextNumberParser.Parser\TextNumbers.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class TextNumbersParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CHAR=1, DIGIT=2, BETWEEN_10_AND_19=3, TENS=4, TENS_HYPHEN_DIGIT=5, HUNDRED=6, 
		THOUSAND=7, MILLION=8, BILLION=9, NOUGHT=10, POINT=11, FRACTIONAL=12, 
		WHITESPACE=13, NEWLINE=14, ANY=15;
	public const int
		RULE_content = 0, RULE_number = 1, RULE_digit = 2, RULE_tens = 3, RULE_tensHyphenDigit = 4, 
		RULE_hundreds = 5, RULE_thousands = 6, RULE_millions = 7, RULE_billions = 8, 
		RULE_fractional = 9, RULE_digitInWord = 10, RULE_tensInWord = 11, RULE_hundredsInWord = 12, 
		RULE_thousandsInWord = 13, RULE_millionsInWord = 14, RULE_billionsInWord = 15, 
		RULE_notNumber = 16, RULE_newLine = 17;
	public static readonly string[] ruleNames = {
		"content", "number", "digit", "tens", "tensHyphenDigit", "hundreds", "thousands", 
		"millions", "billions", "fractional", "digitInWord", "tensInWord", "hundredsInWord", 
		"thousandsInWord", "millionsInWord", "billionsInWord", "notNumber", "newLine"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CHAR", "DIGIT", "BETWEEN_10_AND_19", "TENS", "TENS_HYPHEN_DIGIT", 
		"HUNDRED", "THOUSAND", "MILLION", "BILLION", "NOUGHT", "POINT", "FRACTIONAL", 
		"WHITESPACE", "NEWLINE", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TextNumbers.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TextNumbersParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TextNumbersParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TextNumbersParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotNumberContext[] notNumber() {
			return GetRuleContexts<NotNumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotNumberContext notNumber(int i) {
			return GetRuleContext<NotNumberContext>(i);
		}
		public ContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_content; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextNumbersVisitor<TResult> typedVisitor = visitor as ITextNumbersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContentContext content() {
		ContentContext _localctx = new ContentContext(Context, State);
		EnterRule(_localctx, 0, RULE_content);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHAR) | (1L << DIGIT) | (1L << BETWEEN_10_AND_19) | (1L << TENS) | (1L << TENS_HYPHEN_DIGIT) | (1L << HUNDRED) | (1L << THOUSAND) | (1L << MILLION) | (1L << BILLION) | (1L << NOUGHT) | (1L << POINT) | (1L << FRACTIONAL) | (1L << WHITESPACE) | (1L << NEWLINE) | (1L << ANY))) != 0)) {
				{
				State = 38;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 36;
					number();
					}
					break;
				case 2:
					{
					State = 37;
					notNumber();
					}
					break;
				}
				}
				State = 42;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BillionsContext[] billions() {
			return GetRuleContexts<BillionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BillionsContext billions(int i) {
			return GetRuleContext<BillionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MillionsContext[] millions() {
			return GetRuleContexts<MillionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MillionsContext millions(int i) {
			return GetRuleContext<MillionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThousandsContext[] thousands() {
			return GetRuleContexts<ThousandsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThousandsContext thousands(int i) {
			return GetRuleContext<ThousandsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HundredsContext[] hundreds() {
			return GetRuleContexts<HundredsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HundredsContext hundreds(int i) {
			return GetRuleContext<HundredsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TensHyphenDigitContext[] tensHyphenDigit() {
			return GetRuleContexts<TensHyphenDigitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TensHyphenDigitContext tensHyphenDigit(int i) {
			return GetRuleContext<TensHyphenDigitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TensContext[] tens() {
			return GetRuleContexts<TensContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TensContext tens(int i) {
			return GetRuleContext<TensContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DigitContext[] digit() {
			return GetRuleContexts<DigitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DigitContext digit(int i) {
			return GetRuleContext<DigitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FractionalContext[] fractional() {
			return GetRuleContexts<FractionalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FractionalContext fractional(int i) {
			return GetRuleContext<FractionalContext>(i);
		}
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextNumbersVisitor<TResult> typedVisitor = visitor as ITextNumbersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 2, RULE_number);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 51;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						State = 43;
						billions();
						}
						break;
					case 2:
						{
						State = 44;
						millions();
						}
						break;
					case 3:
						{
						State = 45;
						thousands();
						}
						break;
					case 4:
						{
						State = 46;
						hundreds();
						}
						break;
					case 5:
						{
						State = 47;
						tensHyphenDigit();
						}
						break;
					case 6:
						{
						State = 48;
						tens();
						}
						break;
					case 7:
						{
						State = 49;
						digit();
						}
						break;
					case 8:
						{
						State = 50;
						fractional();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 53;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DigitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT() { return GetToken(TextNumbersParser.DIGIT, 0); }
		public DigitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_digit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextNumbersVisitor<TResult> typedVisitor = visitor as ITextNumbersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDigit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DigitContext digit() {
		DigitContext _localctx = new DigitContext(Context, State);
		EnterRule(_localctx, 4, RULE_digit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			Match(DIGIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TensContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TENS() { return GetToken(TextNumbersParser.TENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHITESPACE() { return GetTokens(TextNumbersParser.WHITESPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE(int i) {
			return GetToken(TextNumbersParser.WHITESPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN_10_AND_19() { return GetToken(TextNumbersParser.BETWEEN_10_AND_19, 0); }
		public TensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tens; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextNumbersVisitor<TResult> typedVisitor = visitor as ITextNumbersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTens(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TensContext tens() {
		TensContext _localctx = new TensContext(Context, State);
		EnterRule(_localctx, 6, RULE_tens);
		int _la;
		try {
			State = 65;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TENS:
			case WHITESPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHITESPACE) {
					{
					State = 57;
					Match(WHITESPACE);
					}
				}

				{
				State = 60;
				Match(TENS);
				State = 62;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 61;
					Match(WHITESPACE);
					}
					break;
				}
				}
				}
				break;
			case BETWEEN_10_AND_19:
				EnterOuterAlt(_localctx, 2);
				{
				State = 64;
				Match(BETWEEN_10_AND_19);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TensHyphenDigitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TENS_HYPHEN_DIGIT() { return GetToken(TextNumbersParser.TENS_HYPHEN_DIGIT, 0); }
		public TensHyphenDigitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tensHyphenDigit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextNumbersVisitor<TResult> typedVisitor = visitor as ITextNumbersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTensHyphenDigit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TensHyphenDigitContext tensHyphenDigit() {
		TensHyphenDigitContext _localctx = new TensHyphenDigitContext(Context, State);
		EnterRule(_localctx, 8, RULE_tensHyphenDigit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			Match(TENS_HYPHEN_DIGIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HundredsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHITESPACE() { return GetTokens(TextNumbersParser.WHITESPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE(int i) {
			return GetToken(TextNumbersParser.WHITESPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HUNDRED() { return GetTokens(TextNumbersParser.HUNDRED); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HUNDRED(int i) {
			return GetToken(TextNumbersParser.HUNDRED, i);
		}
		public HundredsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hundreds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextNumbersVisitor<TResult> typedVisitor = visitor as ITextNumbersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHundreds(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HundredsContext hundreds() {
		HundredsContext _localctx = new HundredsContext(Context, State);
		EnterRule(_localctx, 10, RULE_hundreds);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHITESPACE) {
				{
				State = 69;
				Match(WHITESPACE);
				}
			}

			State = 73;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 72;
					Match(HUNDRED);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 75;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 78;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 77;
				Match(WHITESPACE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThousandsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHITESPACE() { return GetTokens(TextNumbersParser.WHITESPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE(int i) {
			return GetToken(TextNumbersParser.WHITESPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THOUSAND() { return GetTokens(TextNumbersParser.THOUSAND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THOUSAND(int i) {
			return GetToken(TextNumbersParser.THOUSAND, i);
		}
		public ThousandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thousands; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextNumbersVisitor<TResult> typedVisitor = visitor as ITextNumbersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThousands(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThousandsContext thousands() {
		ThousandsContext _localctx = new ThousandsContext(Context, State);
		EnterRule(_localctx, 12, RULE_thousands);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHITESPACE) {
				{
				State = 80;
				Match(WHITESPACE);
				}
			}

			State = 84;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 83;
					Match(THOUSAND);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 86;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 89;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 88;
				Match(WHITESPACE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MillionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHITESPACE() { return GetTokens(TextNumbersParser.WHITESPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE(int i) {
			return GetToken(TextNumbersParser.WHITESPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MILLION() { return GetTokens(TextNumbersParser.MILLION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLION(int i) {
			return GetToken(TextNumbersParser.MILLION, i);
		}
		public MillionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_millions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextNumbersVisitor<TResult> typedVisitor = visitor as ITextNumbersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMillions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MillionsContext millions() {
		MillionsContext _localctx = new MillionsContext(Context, State);
		EnterRule(_localctx, 14, RULE_millions);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHITESPACE) {
				{
				State = 91;
				Match(WHITESPACE);
				}
			}

			State = 95;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 94;
					Match(MILLION);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 97;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 100;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 99;
				Match(WHITESPACE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BillionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHITESPACE() { return GetTokens(TextNumbersParser.WHITESPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE(int i) {
			return GetToken(TextNumbersParser.WHITESPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BILLION() { return GetTokens(TextNumbersParser.BILLION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BILLION(int i) {
			return GetToken(TextNumbersParser.BILLION, i);
		}
		public BillionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_billions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextNumbersVisitor<TResult> typedVisitor = visitor as ITextNumbersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBillions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BillionsContext billions() {
		BillionsContext _localctx = new BillionsContext(Context, State);
		EnterRule(_localctx, 16, RULE_billions);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHITESPACE) {
				{
				State = 102;
				Match(WHITESPACE);
				}
			}

			State = 106;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 105;
					Match(BILLION);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 108;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 110;
				Match(WHITESPACE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FractionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FRACTIONAL() { return GetToken(TextNumbersParser.FRACTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE() { return GetToken(TextNumbersParser.WHITESPACE, 0); }
		public FractionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fractional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextNumbersVisitor<TResult> typedVisitor = visitor as ITextNumbersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFractional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FractionalContext fractional() {
		FractionalContext _localctx = new FractionalContext(Context, State);
		EnterRule(_localctx, 18, RULE_fractional);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHITESPACE) {
				{
				State = 113;
				Match(WHITESPACE);
				}
			}

			State = 116;
			Match(FRACTIONAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DigitInWordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(TextNumbersParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT() { return GetToken(TextNumbersParser.DIGIT, 0); }
		public DigitInWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_digitInWord; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextNumbersVisitor<TResult> typedVisitor = visitor as ITextNumbersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDigitInWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DigitInWordContext digitInWord() {
		DigitInWordContext _localctx = new DigitInWordContext(Context, State);
		EnterRule(_localctx, 20, RULE_digitInWord);
		try {
			State = 122;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 118;
				Match(CHAR);
				State = 119;
				Match(DIGIT);
				}
				}
				break;
			case DIGIT:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 120;
				Match(DIGIT);
				State = 121;
				Match(CHAR);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TensInWordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(TextNumbersParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TENS() { return GetToken(TextNumbersParser.TENS, 0); }
		public TensInWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tensInWord; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextNumbersVisitor<TResult> typedVisitor = visitor as ITextNumbersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTensInWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TensInWordContext tensInWord() {
		TensInWordContext _localctx = new TensInWordContext(Context, State);
		EnterRule(_localctx, 22, RULE_tensInWord);
		try {
			State = 128;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 124;
				Match(CHAR);
				State = 125;
				Match(TENS);
				}
				}
				break;
			case TENS:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 126;
				Match(TENS);
				State = 127;
				Match(CHAR);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HundredsInWordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(TextNumbersParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HUNDRED() { return GetToken(TextNumbersParser.HUNDRED, 0); }
		public HundredsInWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hundredsInWord; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextNumbersVisitor<TResult> typedVisitor = visitor as ITextNumbersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHundredsInWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HundredsInWordContext hundredsInWord() {
		HundredsInWordContext _localctx = new HundredsInWordContext(Context, State);
		EnterRule(_localctx, 24, RULE_hundredsInWord);
		int _la;
		try {
			State = 133;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 130;
				Match(CHAR);
				State = 131;
				Match(HUNDRED);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132;
				_la = TokenStream.LA(1);
				if ( !(_la==CHAR || _la==HUNDRED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThousandsInWordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(TextNumbersParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THOUSAND() { return GetToken(TextNumbersParser.THOUSAND, 0); }
		public ThousandsInWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thousandsInWord; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextNumbersVisitor<TResult> typedVisitor = visitor as ITextNumbersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThousandsInWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThousandsInWordContext thousandsInWord() {
		ThousandsInWordContext _localctx = new ThousandsInWordContext(Context, State);
		EnterRule(_localctx, 26, RULE_thousandsInWord);
		int _la;
		try {
			State = 138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 135;
				Match(CHAR);
				State = 136;
				Match(THOUSAND);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 137;
				_la = TokenStream.LA(1);
				if ( !(_la==CHAR || _la==THOUSAND) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MillionsInWordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(TextNumbersParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLION() { return GetToken(TextNumbersParser.MILLION, 0); }
		public MillionsInWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_millionsInWord; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextNumbersVisitor<TResult> typedVisitor = visitor as ITextNumbersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMillionsInWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MillionsInWordContext millionsInWord() {
		MillionsInWordContext _localctx = new MillionsInWordContext(Context, State);
		EnterRule(_localctx, 28, RULE_millionsInWord);
		int _la;
		try {
			State = 143;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 140;
				Match(CHAR);
				State = 141;
				Match(MILLION);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 142;
				_la = TokenStream.LA(1);
				if ( !(_la==CHAR || _la==MILLION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BillionsInWordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(TextNumbersParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BILLION() { return GetToken(TextNumbersParser.BILLION, 0); }
		public BillionsInWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_billionsInWord; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextNumbersVisitor<TResult> typedVisitor = visitor as ITextNumbersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBillionsInWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BillionsInWordContext billionsInWord() {
		BillionsInWordContext _localctx = new BillionsInWordContext(Context, State);
		EnterRule(_localctx, 30, RULE_billionsInWord);
		int _la;
		try {
			State = 148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 145;
				Match(CHAR);
				State = 146;
				Match(BILLION);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 147;
				_la = TokenStream.LA(1);
				if ( !(_la==CHAR || _la==BILLION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NewLineContext[] newLine() {
			return GetRuleContexts<NewLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewLineContext newLine(int i) {
			return GetRuleContext<NewLineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DigitInWordContext[] digitInWord() {
			return GetRuleContexts<DigitInWordContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DigitInWordContext digitInWord(int i) {
			return GetRuleContext<DigitInWordContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TensInWordContext[] tensInWord() {
			return GetRuleContexts<TensInWordContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TensInWordContext tensInWord(int i) {
			return GetRuleContext<TensInWordContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HundredsInWordContext[] hundredsInWord() {
			return GetRuleContexts<HundredsInWordContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HundredsInWordContext hundredsInWord(int i) {
			return GetRuleContext<HundredsInWordContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThousandsInWordContext[] thousandsInWord() {
			return GetRuleContexts<ThousandsInWordContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThousandsInWordContext thousandsInWord(int i) {
			return GetRuleContext<ThousandsInWordContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MillionsInWordContext[] millionsInWord() {
			return GetRuleContexts<MillionsInWordContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MillionsInWordContext millionsInWord(int i) {
			return GetRuleContext<MillionsInWordContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BillionsInWordContext[] billionsInWord() {
			return GetRuleContexts<BillionsInWordContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BillionsInWordContext billionsInWord(int i) {
			return GetRuleContext<BillionsInWordContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CHAR() { return GetTokens(TextNumbersParser.CHAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR(int i) {
			return GetToken(TextNumbersParser.CHAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHITESPACE() { return GetTokens(TextNumbersParser.WHITESPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE(int i) {
			return GetToken(TextNumbersParser.WHITESPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] POINT() { return GetTokens(TextNumbersParser.POINT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT(int i) {
			return GetToken(TextNumbersParser.POINT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOUGHT() { return GetTokens(TextNumbersParser.NOUGHT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOUGHT(int i) {
			return GetToken(TextNumbersParser.NOUGHT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ANY() { return GetTokens(TextNumbersParser.ANY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY(int i) {
			return GetToken(TextNumbersParser.ANY, i);
		}
		public NotNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextNumbersVisitor<TResult> typedVisitor = visitor as ITextNumbersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotNumberContext notNumber() {
		NotNumberContext _localctx = new NotNumberContext(Context, State);
		EnterRule(_localctx, 32, RULE_notNumber);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 162;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
					case 1:
						{
						State = 150;
						newLine();
						}
						break;
					case 2:
						{
						State = 151;
						digitInWord();
						}
						break;
					case 3:
						{
						State = 152;
						tensInWord();
						}
						break;
					case 4:
						{
						State = 153;
						hundredsInWord();
						}
						break;
					case 5:
						{
						State = 154;
						thousandsInWord();
						}
						break;
					case 6:
						{
						State = 155;
						millionsInWord();
						}
						break;
					case 7:
						{
						State = 156;
						billionsInWord();
						}
						break;
					case 8:
						{
						State = 157;
						Match(CHAR);
						}
						break;
					case 9:
						{
						State = 158;
						Match(WHITESPACE);
						}
						break;
					case 10:
						{
						State = 159;
						Match(POINT);
						}
						break;
					case 11:
						{
						State = 160;
						Match(NOUGHT);
						}
						break;
					case 12:
						{
						State = 161;
						Match(ANY);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 164;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(TextNumbersParser.NEWLINE, 0); }
		public NewLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITextNumbersVisitor<TResult> typedVisitor = visitor as ITextNumbersVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewLineContext newLine() {
		NewLineContext _localctx = new NewLineContext(Context, State);
		EnterRule(_localctx, 34, RULE_newLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x11', '\xAB', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', ')', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', ',', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x6', '\x3', '\x36', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '\x37', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x5', '\x5', '=', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x41', '\n', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x44', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x5', '\a', 'I', '\n', '\a', '\x3', '\a', '\x6', '\a', 'L', 
		'\n', '\a', '\r', '\a', '\xE', '\a', 'M', '\x3', '\a', '\x5', '\a', 'Q', 
		'\n', '\a', '\x3', '\b', '\x5', '\b', 'T', '\n', '\b', '\x3', '\b', '\x6', 
		'\b', 'W', '\n', '\b', '\r', '\b', '\xE', '\b', 'X', '\x3', '\b', '\x5', 
		'\b', '\\', '\n', '\b', '\x3', '\t', '\x5', '\t', '_', '\n', '\t', '\x3', 
		'\t', '\x6', '\t', '\x62', '\n', '\t', '\r', '\t', '\xE', '\t', '\x63', 
		'\x3', '\t', '\x5', '\t', 'g', '\n', '\t', '\x3', '\n', '\x5', '\n', 'j', 
		'\n', '\n', '\x3', '\n', '\x6', '\n', 'm', '\n', '\n', '\r', '\n', '\xE', 
		'\n', 'n', '\x3', '\n', '\x5', '\n', 'r', '\n', '\n', '\x3', '\v', '\x5', 
		'\v', 'u', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x5', '\f', '}', '\n', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x83', '\n', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x88', '\n', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x8D', '\n', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x92', 
		'\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', 
		'\x97', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x6', '\x12', '\xA5', 
		'\n', '\x12', '\r', '\x12', '\xE', '\x12', '\xA6', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x2', '\x2', '\x14', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '$', '\x2', '\x6', '\x4', '\x2', '\x3', '\x3', '\b', 
		'\b', '\x4', '\x2', '\x3', '\x3', '\t', '\t', '\x4', '\x2', '\x3', '\x3', 
		'\n', '\n', '\x4', '\x2', '\x3', '\x3', '\v', '\v', '\x2', '\xC4', '\x2', 
		'*', '\x3', '\x2', '\x2', '\x2', '\x4', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x39', '\x3', '\x2', '\x2', '\x2', '\b', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\x45', '\x3', '\x2', '\x2', '\x2', '\f', 'H', '\x3', 
		'\x2', '\x2', '\x2', '\xE', 'S', '\x3', '\x2', '\x2', '\x2', '\x10', '^', 
		'\x3', '\x2', '\x2', '\x2', '\x12', 'i', '\x3', '\x2', '\x2', '\x2', '\x14', 
		't', '\x3', '\x2', '\x2', '\x2', '\x16', '|', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x82', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x87', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x91', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x96', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\xA4', '\x3', '\x2', '\x2', '\x2', '$', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '&', ')', '\x5', '\x4', '\x3', '\x2', '\'', ')', '\x5', '\"', '\x12', 
		'\x2', '(', '&', '\x3', '\x2', '\x2', '\x2', '(', '\'', '\x3', '\x2', 
		'\x2', '\x2', ')', ',', '\x3', '\x2', '\x2', '\x2', '*', '(', '\x3', '\x2', 
		'\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', '+', '\x3', '\x3', 
		'\x2', '\x2', '\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', '-', '\x36', 
		'\x5', '\x12', '\n', '\x2', '.', '\x36', '\x5', '\x10', '\t', '\x2', '/', 
		'\x36', '\x5', '\xE', '\b', '\x2', '\x30', '\x36', '\x5', '\f', '\a', 
		'\x2', '\x31', '\x36', '\x5', '\n', '\x6', '\x2', '\x32', '\x36', '\x5', 
		'\b', '\x5', '\x2', '\x33', '\x36', '\x5', '\x6', '\x4', '\x2', '\x34', 
		'\x36', '\x5', '\x14', '\v', '\x2', '\x35', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '.', '\x3', '\x2', '\x2', '\x2', '\x35', '/', '\x3', '\x2', 
		'\x2', '\x2', '\x35', '\x30', '\x3', '\x2', '\x2', '\x2', '\x35', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x35', '\x32', '\x3', '\x2', '\x2', '\x2', 
		'\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x37', '\x3', '\x2', '\x2', '\x2', '\x37', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x5', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\a', '\x4', '\x2', 
		'\x2', ':', '\a', '\x3', '\x2', '\x2', '\x2', ';', '=', '\a', '\xF', '\x2', 
		'\x2', '<', ';', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', 
		'\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', '>', '@', '\a', '\x6', '\x2', 
		'\x2', '?', '\x41', '\a', '\xF', '\x2', '\x2', '@', '?', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x41', '\x3', '\x2', '\x2', '\x2', '\x41', '\x44', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x44', '\a', '\x5', '\x2', '\x2', 
		'\x43', '<', '\x3', '\x2', '\x2', '\x2', '\x43', '\x42', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\t', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', 
		'\a', '\a', '\x2', '\x2', '\x46', '\v', '\x3', '\x2', '\x2', '\x2', 'G', 
		'I', '\a', '\xF', '\x2', '\x2', 'H', 'G', '\x3', '\x2', '\x2', '\x2', 
		'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 'K', '\x3', '\x2', '\x2', '\x2', 
		'J', 'L', '\a', '\b', '\x2', '\x2', 'K', 'J', '\x3', '\x2', '\x2', '\x2', 
		'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 
		'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', 'P', '\x3', '\x2', '\x2', '\x2', 
		'O', 'Q', '\a', '\xF', '\x2', '\x2', 'P', 'O', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'T', '\a', '\xF', '\x2', '\x2', 'S', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', 'V', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'W', '\a', '\t', '\x2', '\x2', 'V', 'U', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', 
		'\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', '[', '\x3', '\x2', '\x2', 
		'\x2', 'Z', '\\', '\a', '\xF', '\x2', '\x2', '[', 'Z', '\x3', '\x2', '\x2', 
		'\x2', '[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', '\xF', '\x3', '\x2', 
		'\x2', '\x2', ']', '_', '\a', '\xF', '\x2', '\x2', '^', ']', '\x3', '\x2', 
		'\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', '_', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '`', '\x62', '\a', '\n', '\x2', '\x2', '\x61', '`', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x66', '\x3', '\x2', '\x2', '\x2', '\x65', 'g', 
		'\a', '\xF', '\x2', '\x2', '\x66', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'\x66', 'g', '\x3', '\x2', '\x2', '\x2', 'g', '\x11', '\x3', '\x2', '\x2', 
		'\x2', 'h', 'j', '\a', '\xF', '\x2', '\x2', 'i', 'h', '\x3', '\x2', '\x2', 
		'\x2', 'i', 'j', '\x3', '\x2', '\x2', '\x2', 'j', 'l', '\x3', '\x2', '\x2', 
		'\x2', 'k', 'm', '\a', '\v', '\x2', '\x2', 'l', 'k', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', 'q', '\x3', '\x2', '\x2', 
		'\x2', 'p', 'r', '\a', '\xF', '\x2', '\x2', 'q', 'p', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', '\x13', '\x3', '\x2', 
		'\x2', '\x2', 's', 'u', '\a', '\xF', '\x2', '\x2', 't', 's', '\x3', '\x2', 
		'\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'w', '\a', '\xE', '\x2', '\x2', 'w', '\x15', '\x3', 
		'\x2', '\x2', '\x2', 'x', 'y', '\a', '\x3', '\x2', '\x2', 'y', '}', '\a', 
		'\x4', '\x2', '\x2', 'z', '{', '\a', '\x4', '\x2', '\x2', '{', '}', '\a', 
		'\x3', '\x2', '\x2', '|', 'x', '\x3', '\x2', '\x2', '\x2', '|', 'z', '\x3', 
		'\x2', '\x2', '\x2', '}', '\x17', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', 
		'\a', '\x3', '\x2', '\x2', '\x7F', '\x83', '\a', '\x6', '\x2', '\x2', 
		'\x80', '\x81', '\a', '\x6', '\x2', '\x2', '\x81', '\x83', '\a', '\x3', 
		'\x2', '\x2', '\x82', '~', '\x3', '\x2', '\x2', '\x2', '\x82', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x83', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x85', '\a', '\x3', '\x2', '\x2', '\x85', '\x88', '\a', '\b', 
		'\x2', '\x2', '\x86', '\x88', '\t', '\x2', '\x2', '\x2', '\x87', '\x84', 
		'\x3', '\x2', '\x2', '\x2', '\x87', '\x86', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\a', '\x3', 
		'\x2', '\x2', '\x8A', '\x8D', '\a', '\t', '\x2', '\x2', '\x8B', '\x8D', 
		'\t', '\x3', '\x2', '\x2', '\x8C', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x8F', '\a', '\x3', '\x2', '\x2', '\x8F', '\x92', 
		'\a', '\n', '\x2', '\x2', '\x90', '\x92', '\t', '\x4', '\x2', '\x2', '\x91', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\x91', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\a', 
		'\x3', '\x2', '\x2', '\x94', '\x97', '\a', '\v', '\x2', '\x2', '\x95', 
		'\x97', '\t', '\x5', '\x2', '\x2', '\x96', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x95', '\x3', '\x2', '\x2', '\x2', '\x97', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\xA5', '\x5', '$', '\x13', '\x2', '\x99', 
		'\xA5', '\x5', '\x16', '\f', '\x2', '\x9A', '\xA5', '\x5', '\x18', '\r', 
		'\x2', '\x9B', '\xA5', '\x5', '\x1A', '\xE', '\x2', '\x9C', '\xA5', '\x5', 
		'\x1C', '\xF', '\x2', '\x9D', '\xA5', '\x5', '\x1E', '\x10', '\x2', '\x9E', 
		'\xA5', '\x5', ' ', '\x11', '\x2', '\x9F', '\xA5', '\a', '\x3', '\x2', 
		'\x2', '\xA0', '\xA5', '\a', '\xF', '\x2', '\x2', '\xA1', '\xA5', '\a', 
		'\r', '\x2', '\x2', '\xA2', '\xA5', '\a', '\f', '\x2', '\x2', '\xA3', 
		'\xA5', '\a', '\x11', '\x2', '\x2', '\xA4', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\x99', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\x9B', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x9F', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xA1', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA2', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\xA7', '#', '\x3', '\x2', '\x2', 
		'\x2', '\xA8', '\xA9', '\a', '\x10', '\x2', '\x2', '\xA9', '%', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '(', '*', '\x35', '\x37', '<', '@', '\x43', 
		'H', 'M', 'P', 'S', 'X', '[', '^', '\x63', '\x66', 'i', 'n', 'q', 't', 
		'|', '\x82', '\x87', '\x8C', '\x91', '\x96', '\xA4', '\xA6',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
